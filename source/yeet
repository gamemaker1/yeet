#!/bin/bash

## YEET
## ----

# A minimalistic pacman wrapper

## CREDITS
# ASCII art using the figlet CLI from AUR (https://aur.archlinux.org/packages/figlet) and the pagga font from the figlet-fonts-extra package from AUR (https://aur.archlinux.org/packages/figlet-fonts-extra_)

## DEPENDENCIES
# git
# pacman
# package-query
# base-devel (group)

## SETUP
# Unalias everything to prevent weirdness
unalias -a
# Fail and exit when the first error occurs
set -e
# Enable globs
shopt -s nullglob
# For debbuging
#set -xv
# package-query colors
export PQ_COLORS="lver=1;34:installed=1;32:grp=1;33:od=1;31:votes=0:popularity=0:dsc=0:orphan=0"

## UTILITY
# Print messages in colour
# Green text
function printg {
	echo -e "\e[1;32m$*\e[0m"
}
# Blue text
function printb {
	echo -e "\e[1;34m$*\e[0m"
}
# Yellow text
function printw {
	echo -e "\e[1;33m$*\e[0m"
}
# Red text
function printr {
	echo -e "\e[1;31m$*\e[0m"
}
# Join elements of an array (taken from SO - https://stackoverflow.com/a/17841619; thank you to the answerer)
function join_by {
	local d=${1-} f=${2-}
	if shift 2; then
		printf %s "$f" "${@/#/$d}"
	fi
}
# Check if we are root, else use sudo
function require_root {
	if [[ "$(id -u)" != "0" ]]; then
		if [[ -f "$(command -v $SUDO_BIN)" ]]; then
			$SUDO_BIN $*
		else
			printr "ERR Command $SUDO_BIN not found, cannot run command \`$*\` without root; aborting..."
			exit 126
		fi
	else
		$*
	fi
}
# Print package summary and import GPG keys if needed
function print_package_summary {
	# First check if a .SRCINFO file exists in the dir
	if ! [[ -f "$1/.SRCINFO" ]]; then
		printr "ERR No .SRCINFO file exists; cannot parse package info; try rebuilding the package"
		return 1
	fi

	# Parse the .SRCINFO file to get the following info:
	# Package name
	name=""
	# Package description
	desc=""
	# Package version
	ver=""
	# Upstream URL
	url=""
	# License(s)
	license=""
	# Dependencies
	dependencies=()
	# Valid PGP signing keys
	pgpkeys=()

	# Parse it
	IFS="="
	while read -r key value; do
		# Remove all spaces in the key and the leading space in the value
		key="$(echo $key | tr -d '[:space:]')"
		value="$(echo $value | awk '{$1=$1;print}')"
		if [[ "$key" == "depends" ]]; then
			# Remove version numbers
			value="${value%>*}"
			value="${value%=*}"
			value="$(echo $value | tr -d '[:space:]')"
			dependencies+=("$value")
		fi
		if [[ "$key" == "pkgname" ]]; then
			value="$(echo $value | tr -d '[:space:]')"
			package_name="$value"
		fi
		if [[ "$key" == "pkgver" ]]; then
			value="$(echo $value | tr -d '[:space:]')"
			package_ver="$value"
		fi
		if [[ "$key" == "pkgdesc" ]]; then
			package_desc="$value"
		fi
		if [[ "$key" == "url" ]]; then
			url="$value"
		fi
		if [[ "$key" == "license" ]]; then
			license+="$value "
		fi
		if [[ "$key" == "validpgpkeys" ]]; then
			value="$(echo $value | tr -d '[:space:]')"
			pgpkeys+=("$value")
		fi
	done < "$1/.SRCINFO"

	# Print detailed package info
	printg "==> Package overview:"
	printb " -> \e[0;33mName: $package_name\e[0m"
	printb " -> \e[0;33mVersion: $package_ver\e[0m"
	printb " -> \e[0;33mDescription: $package_desc\e[0m"
	printb " -> \e[0;33mUpstream URL: $url\e[0m"
	printb " -> \e[0;33mLicense: $license\e[0m"
	printb " -> \e[0;33mDependencies (to install):\e[0m"
	for dep in "${dependencies[@]}"; do
		printb "  -> $(package-query -iSA "$dep")"
	done

	# Import PGP keys
	if [[ "${#pgpkeys[@]}" != "0" ]]; then
		printb "==> Importing PGP keys $(join_by ', ' $pgpkeys)"
		for key in "${pgpkeys[@]}"; do
			gpg --recv-keys "$key"
		done
		printg "==> Imported PGP keys successfully!"
	fi
}
# Print the logo
function print_logo {
	printw ""
	printw "░░░░░░░░░░░░░░░░░"
	printw "░█░█░█▀▀░█▀▀░▀█▀░"
	printw "░░█░░█▀▀░█▀▀░░█░░"
	printw "░░▀░░▀▀▀░▀▀▀░░▀░░"
	printw "░░░░░░░░░░░░░░░░░"
	printw ""
	printw "v0.4.0"
	printw ""
}

## CONFIG
# Read the variables from a config file (either `$XDG_CONFIG_HOME/yeet.conf` or `$HOME/.config/yeet.conf`)
CONFIG_FILE_PATH="${XDG_CONFIG_HOME:-$HOME/.config}/yeet/yeet.conf"
# Make sure the yeet dir exists
mkdir -p "${XDG_CONFIG_HOME:-$HOME/.config}/yeet/"
# Now check if the user already has a config file in that dir
if [[ -f "$CONFIG_FILE_PATH" ]]; then
	# If the file exists, set all the variables from it
	# Parse it
	IFS="="
	while read -r key value; do
		# Remove all spaces in the key and the leading space in the value
		key="$(echo $key | tr -d '[:space:]')"
		value="$(echo $value | awk '{$1=$1;print}')"
		case "$key" in
			"AUR_BASE_URL") [[ -z "$AUR_BASE_URL" ]] && export AUR_BASE_URL="$value";;
			"PACMAN_BIN") [[ -z "$PACMAN_BIN" ]] && export PACMAN_BIN="$value";;
			"SUDO_BIN") [[ -z "$SUDO_BIN" ]] && export SUDO_BIN="$value";;
			"CACHE_DIR") [[ -z "$CACHE_DIR" ]] && export CACHE_DIR="$value";;
			"FILE_MANAGER") [[ -z "$FILE_MANAGER" ]] && export FILE_MANAGER="$value";;
			"PRINT_LOGO") [[ -z "$PRINT_LOGO" ]] && export PRINT_LOGO="$value";;
		esac
	done < "$CONFIG_FILE_PATH"
else
	# If there is no config file, create one for the user
	echo "# ░░░░░░░░░░░░░░░░░" >> "$CONFIG_FILE_PATH"
	echo "# ░█░█░█▀▀░█▀▀░▀█▀░" >> "$CONFIG_FILE_PATH"
	echo "# ░░█░░█▀▀░█▀▀░░█░░" >> "$CONFIG_FILE_PATH"
	echo "# ░░▀░░▀▀▀░▀▀▀░░▀░░" >> "$CONFIG_FILE_PATH"
	echo "# ░░░░░░░░░░░░░░░░░" >> "$CONFIG_FILE_PATH"
	echo "# " >> "$CONFIG_FILE_PATH"
	echo "## CONFIGURATION FILE" >> "$CONFIG_FILE_PATH"
	echo "## ------------------" >> "$CONFIG_FILE_PATH"
	echo "# " >> "$CONFIG_FILE_PATH"
	echo "# URL for AUR" >> "$CONFIG_FILE_PATH"
	echo "AUR_BASE_URL=\"https://aur.archlinux.org\"" >> "$CONFIG_FILE_PATH"
	echo "# Path to pacman binary" >> "$CONFIG_FILE_PATH"
	echo "PACMAN_BIN=/usr/bin/pacman" >> "$CONFIG_FILE_PATH"
	echo "# Path to sudo/doas/'root-helper' binary" >> "$CONFIG_FILE_PATH"
	echo "SUDO_BIN=/usr/bin/sudo" >> "$CONFIG_FILE_PATH"
	echo "# Where the packages should be cloned (defaults to ~/.cache/yeet/)" >> "$CONFIG_FILE_PATH"
	echo "CACHE_DIR=/home/$USER/.cache/yeet/" >> "$CONFIG_FILE_PATH"
	echo "# The file manager to use to browse the package's snapshot before building (defaults to ranger)" >> "$CONFIG_FILE_PATH"
	echo "FILE_MANAGER=/usr/bin/ranger" >> "$CONFIG_FILE_PATH"
	echo "#FILE_MANAGER=/usr/bin/thunar" >> "$CONFIG_FILE_PATH"
	echo "#FILE_MANAGER=/usr/bin/nemo" >> "$CONFIG_FILE_PATH"
	echo "#FILE_MANAGER=/usr/bin/vim" >> "$CONFIG_FILE_PATH"
	echo "#FILE_MANAGER=/usr/bin/vimfm" >> "$CONFIG_FILE_PATH"
	echo "# Whether to print the logo every time or not" >> "$CONFIG_FILE_PATH"
	echo "PRINT_LOGO=true" >> "$CONFIG_FILE_PATH"

	# If there is no config yet and the operation is not 'help', definitely print the logo
	if [[ "$1" != "-h" ]] && [[ "$1" != "--help" ]] && ! [[ -z "$1" ]]; then
		print_logo
	fi
	# Then turn it off, we don't want to print again
	export PRINT_LOGO=false
	# Then set the defaults
	# URL for AUR
	export AUR_BASE_URL="https://aur.archlinux.org"
	# Path to sudo/doas/'root helper' binary
	export SUDO_BIN=/usr/bin/sudo
	# Path to pacman binary
	export PACMAN_BIN=/usr/bin/pacman
	# Where the packages should be cloned (defaults to ~/.cache/yeet/)
	export CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/yeet/"
	# The file manager to use to browse the package's snapshot before building (defaults to ranger; you can enter thunar, nemo, nautilus, vim, or any other program as well)
	export FILE_MANAGER=/usr/bin/ranger
	
	printw "WARN No config file found, using defaults; created default config file at $CONFIG_FILE_PATH"
fi

## UI
# Print out the logo, unless specified otherwise in the config (generated using command `figlet -f pagga YEET`)
if [[ "$PRINT_LOGO" == "true" ]]; then
	# Make sure the operation is not 'help', else we will be printing the logo twice
	if [[ "$1" != "-h" ]] && [[ "$1" != "--help" ]] && ! [[ -z "$1" ]]; then
		print_logo
	fi
fi

## OPTION parsing
# Regex for the options:
option_regex="^\-"
# yeet -h                        - Print this help text
help_regex="(\-h|\-\-help)"
# yeet -U OR yeet -Syyu          - Update all packages
# yeet -S <package name>         - Install the specified package(s)
updateinstall_regex_1="\-S(U)*(y)*(u)*"
updateinstall_regex_2="\-U"
install_regex="\-S"
# yeet -s <package search terms> - Search for a package
search_regex="\-s"
# yeet -R <package name>         - Remove the specified package(s)
remove_regex="\-Rs*"
# yeet -B <path to package dir>  - Build an AUR package
build_regex="\-B"
# yeet -D/F/Q/T [options]        - Run pacman -D/F/Q/T
pacman_regex="\-[DFQT].*"
# yeet <package search terms>    - Search for a package and install it

# First check if the first param is an option
if [[ "$1" =~ $option_regex ]]; then
	# Then test the regex
	if [[ "$1" =~ $help_regex ]] || [[ -z "$1" ]]; then
		operation="help"
	elif [[ "$1" =~ $install_regex ]]; then
		# Install package(s)
		operation="install"
		# Shift the params so the second one is the first, the third is the second and so on
		shift
	elif [[ "$1" =~ $updateinstall_regex_1 ]] || [[ "$1" =~ $updateinstall_regex_2 ]]; then
		# Update all packages
		operation="updateinstall"
		# Shift the params so the second one is the first, the third is the second and so on
		shift
	elif [[ "$1" =~ $search_regex ]]; then
		# Search for a package
		operation="search"
		# Shift the params so the second one is the first, the third is the second and so on
		shift
	elif [[ "$1" =~ $remove_regex ]]; then
		# Remove package(s)
		operation="remove"
		# Shift the params so the second one is the first, the third is the second and so on
		shift
	elif [[ "$1" =~ $build_regex ]]; then
		# Build package
		operation="build"
		# Shift the params so the second one is the first, the third is the second and so on
		shift
	elif [[ "$1" =~ $pacman_regex ]]; then
		# If the first option is -D/F/Q/T and the like (e.g., -Dkk, -Fy, -Ql, -Tv), then let pacman handle it
		operation="pacman"
	else
		# Invalid option, show help
		operation="help"
	fi
else
	# Search for a package and install it
	operation="searchinstall"
fi

## OPERATIONS
# Print help
function help {
	print_logo
	printg "USAGE"
	printb ""
	printw "\e[0;34mPrint this help text                 \e[1;33m yeet -h "
	printw "\e[0;34mUpdate all packages                  \e[1;33m yeet -U "
	printw "\e[0;34mSearch for a package                 \e[1;33m yeet -s <package search terms>"
	printw "\e[0;34mInstall the specified package(s)     \e[1;33m yeet -S <package name>"
	printw "\e[0;34mRemove the specified package(s)      \e[1;33m yeet -R <package name>"
	printw "\e[0;34mBuild an AUR package                 \e[1;33m yeet -B <path to package dir>"
	printw "\e[0;34mRun pacman -D                        \e[1;33m yeet -D [options]"
	printw "\e[0;34mRun pacman -F                        \e[1;33m yeet -F [options]"
	printw "\e[0;34mRun pacman -Q                        \e[1;33m yeet -Q [options]"
	printw "\e[0;34mRun pacman -T                        \e[1;33m yeet -T [options]"
	printw "\e[0;34mSearch for a package and install it  \e[1;33m yeet <package search terms>"
}
# Update all packages
function update_packages {
	printb "==> Updating all packages..."

	# First update packages from sync repos
	printb "==> Updating packages from sync repos using pacman..."
	# Check that the pacman binary exists
	if ! [[ -f "$(command -v $PACMAN_BIN)" ]] ; then
		printr "ERR Command $PACMAN_BIN not found, cannot use pacman. Edit the PACMAN_BIN variable in $CONFIG_FILE_PATH and change it to the path to pacman"
		exit 2
	else
		# Install it using pacman
		require_root $PACMAN_BIN -Syyu
	fi
	printg "==> Succesfully updated all packages from sync repos!"

	# Then check for AUR updates
	printb "==> Updating packages from AUR..."
	printb "==> Searching for packages to update..."
	aur_packages_to_update=$(package-query --rsort=p -uA || echo "")
	if [[ -z "$aur_packages_to_update" ]]; then
		printw "==> Nothing to do"
	else
		echo "$aur_packages_to_update"
		printg "==> Updating all the above packages"
		package_names="$(package-query -uA -f '%n' || echo "")"
		install_packages $package_names
		printg "==> Succesfully updated all packages from AUR!"
	fi
}
# Search for a package
function search_packages {
	printb "==> Searching for $*..."
	# Search the sync repos and AUR
	package-query --rsort=p -sSA "$*"
}
# Install package(s)
function install_packages {
	# Loop through the packages and install each one
	for package in "$@"; do
		printb "==> Installing $package..."

		# Check if the packages exist
		printb "==> Fetching package info..."
		# First search the sync repos
		if ! package-query -qS "$package"; then
			# If it is not in the sync repos, search AUR
			if ! package-query -qA "$package"; then
				# If it is not in AUR, print out a not found error
				printr "ERR Package $package not found!"
				# Skip this package
				continue
			else
				# If it is there in AUR, build from AUR
				use_pacman=0
			fi
		else
			# If it is there in the sync repos, use pacman to install it
			use_pacman=1
		fi
		
		printg "==> Installing $(package-query --rsort=p -iSA "$package")"

		# If the package is in the sync repos, use pacman to install it
		if [[ "$use_pacman" == "1" ]]; then
			# Check that the pacman binary exists
			if ! [[ -f "$(command -v $PACMAN_BIN)" ]] ; then
				printr "ERR Command $PACMAN_BIN not found, cannot use pacman. Edit the PACMAN_BIN variable in $CONFIG_FILE_PATH and change it to the path to pacman"
				exit 2
			else
				# Install it using pacman
				require_root $PACMAN_BIN -S "$package"
			fi
		else
			# Else it is in AUR, build it

			# Move into the build directory
			mkdir -p "$CACHE_DIR/build/"
			cd "$CACHE_DIR/build/"
			# Check if the package is already built
			if [[ -d "$package" ]]; then
				# Ask the user if they want to rebuild the package
				read -p $'\e[1;33m ==> Package is already built, rebuild?\e[0m [\e[1;32my\e[0m/\e[1;31mN\e[0m] ' -n 1 -r
				
				if [[ $REPLY =~ ^[Yy]$ ]]; then
					# If yes, delete the package dir and clone it again
					printb "\n==> Rebuilding $package..."
					rm -rf "$package"
					git clone --quiet "$AUR_BASE_URL/$package.git" "$package"
				else
					# If not, install it with pacman -U and exit
					cd "$package"
					# Check if there is a .pkg.tar.zst file
					if [[ -n $(echo *.pkg.tar.zst) ]]; then
						# If there is, install it
						require_root $PACMAN_BIN -U *.pkg.tar.zst
						printg "==> Installed $package successfully"
						return
					else
						# Else error out
						printr "ERR Could not find prebuilt package! Try rebuilding the package."
						return 1
					fi
				fi
			else
				# If it is not already built, clone it
				git clone --quiet "$AUR_BASE_URL/$package.git" "$package"
			fi

			# If the package exists, the directory exists, else it does not exist
			# Ideally this should not happen
			if ! [[ -d "$package" ]]; then
				printr "ERR Package $package not found in AUR!"
				exit 1
			fi

			cd "$package"
			
			read -p $'\e[1;33m ==> Edit build files?\e[0m [\e[1;32my\e[0m/\e[1;31mN\e[0m] ' -n 1 -r

			if [[ $REPLY =~ ^[Yy]$ ]]; then
				printb "\n==> Editing build files for $package..."
				if ! [[ -f "$(command -v $FILE_MANAGER)" ]] ; then
					printw "WARN Command $FILE_MANAGER not found, cannot open file manager to edit build files. Edit the FILE_MANAGER variable in $CONFIG_FILE_PATH and change it to your preferred file manager"
				else
					# Open the file manager
					$FILE_MANAGER .
					# Once they have edited everything, reprint the .SRCINFO file
					makepkg --printsrcinfo > .SRCINFO
				fi
			fi

			# Parse .SRCINFO and do two things:
			# - print package info
			# - check if we need to import PGP keys
			printg "==> Commencing build process..."
			
			# Get package details
			print_package_summary "."

			printg "==> Building $package..."
			
			# Build, install and clean up
			makepkg -sfCci
		fi

		printg "==> Installed $package successfully"
	done
}
# Update the sync repos and then install package(s)
function updateinstall_packages {
	# First update the repos
	update_packages
	
	# Then install package(s)
	if ! [[ -z "$*" ]]; then
		install_packages $*
	fi
}
# Remove package(s)
function remove_packages {
	printb "==> Removing $(join_by ', ' $*)..."
	require_root $PACMAN_BIN -Rs $*
	printg "==> Removed $(join_by ', ' $*) successfully"
}
# Build a package
function build_packages {
	printb "==> Building AUR package from contents of directory $1..."
	# First check if the directory exists
	if ! [[ -d "$1" ]]; then
		printr "ERR Directory $1 does not exist!"
		exit 1
	fi
	
	printb "==> Searching for PKGBUILD in directory $1..."
	# Then check if there is a PKGBUILD in that directory
	if ! [[ -f "$1/PKGBUILD" ]]; then
		printr "ERR Could not find PKGBUILD in $1!"
		exit 1
	fi

	printg "==> Found PKGBUILD!"

	print_package_summary "$1"

	printg "==> Building package..."

	# Build, but don't install the package
	cd "$1"
	makepkg -sfCc

	printg "==> Package built succesfully!"

	# Ask the user if they want to install the package
	read -p $'\e[1;33m ==> Install package?\e[0m [\e[1;32my\e[0m/\e[1;31mN\e[0m] ' -n 1 -r
	if [[ $REPLY =~ ^[Yy]$ ]] || [[ -z "$REPLY" ]]; then
		printb "==> Installing..."
		
		# Install the package using pacman
		# Check if there is a .pkg.tar.zst file
		if [[ -n $(echo *.pkg.tar.zst) ]]; then
			# If there is, install it
			require_root $PACMAN_BIN -U *.pkg.tar.zst
			printg "==> Package installed successfully!"
			return
		else
			# Else attempt to rebuild and directly install it
			printr "ERR Could not find prebuilt package! Attempting to rebuild package..."
			makepkg -sfCci
			printg "==> Package installed successfully!"
			return
		fi
	else
		printw "==> Package built; but not installed. Run \`yeet -B $1\` again if you want to install the package."
	fi
}
# Search for a package and install it
function searchinstall_packages {
	# Search for packages
	search_packages "$*"
	
	# Ask the user what packages they want to install
	read -p $'\e[1;33m==> Enter names of the packages to install, separated by spaces:\e[0m ' -r
	printb
	if [[ -z "$REPLY" ]]; then
		printr "==> No packages selected, aborting!"
		exit 127
	fi

	# Install the selected packages
	install_packages $REPLY
}

# Call the appropriate function
case "$operation" in
	"help") help;;
	"search") search_packages $*;;
	"install") install_packages $*;;
	"updateinstall") updateinstall_packages $*;;
	"remove") remove_packages $*;;
	"build") build_packages $*;;
	"pacman") require_root $PACMAN_BIN $*;;
	"searchinstall") searchinstall_packages $*;;
esac
# Print a newline at the end
printb ""